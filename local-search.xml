<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode 2 - Add Two Numbers</title>
    <link href="/2025/09/17/LeetCode-2-Add-Two-Numbers/"/>
    <url>/2025/09/17/LeetCode-2-Add-Two-Numbers/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-2-Add-Two-Numbers"><a href="#LeetCode-2-Add-Two-Numbers" class="headerlink" title="LeetCode 2 - Add Two Numbers"></a>LeetCode 2 - Add Two Numbers</h1><p>👉 <a href="https://leetcode.com/problems/add-two-numbers/description/">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">You are given two non-empty linked lists representing two non-negative integers. The digits are stored <span class="hljs-keyword">in</span> reverse order, and each of their nodes contains a single digit. Add the two numbers and <span class="hljs-built_in">return</span> the <span class="hljs-built_in">sum</span> as a linked list.<br>You may assume the two numbers <span class="hljs-keyword">do</span> not contain any leading zero, except the number 0 itself.<br></code></pre></td></tr></table></figure><p>給兩個單向鏈結串列 <code>l1</code>、<code>l2</code>，每個節點存一位數字<br>數字以反向儲存代表一個十進位整數<br>回傳兩數之和的鏈結串列</p><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><img src="/2025/09/17/LeetCode-2-Add-Two-Numbers/1.jpg" class=""><blockquote><p><strong>Input</strong>: l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br><strong>Output</strong>: [7,0,8]<br><strong>Explanation</strong>: 342 + 465 &#x3D; 807.</p></blockquote><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><blockquote><p><strong>Input</strong>: l1 &#x3D; [0], l2 &#x3D; [0]<br><strong>Output</strong>: [0]</p></blockquote><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><blockquote><p><strong>Input</strong>: l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br><strong>Output</strong>: [8,9,9,9,0,0,0,1]</p></blockquote><hr><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>每個鏈中的節點數量在 [1, 100] 範圍內</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>不會有 0 開頭的鏈結串列</li></ul><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="暴力解"><a href="#暴力解" class="headerlink" title="暴力解"></a>暴力解</h3><p><strong>解題想法</strong>: 將兩鏈結串列轉成整數做相加，最後把和轉回鏈結串列<br><strong>時間複雜度</strong>: O(m+n)<br><strong>空間複雜度</strong>: O(m+n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">linkedlist_to_number</span>(<span class="hljs-params">self,l</span>):<br>        num = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> l:<br>            num += <span class="hljs-built_in">str</span>(l.val)<br>            l = l.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(num[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number_to_linkedlist</span>(<span class="hljs-params">self, num</span>):<br>        head = ListNode(<span class="hljs-number">0</span>)<br>        curr = head<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num)[::-<span class="hljs-number">1</span>]:   <br>            curr.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-built_in">int</span>(d))<br>            curr = curr.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head.<span class="hljs-built_in">next</span> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1, l2</span>):<br>        l1= <span class="hljs-variable language_">self</span>.linkedlist_to_number(l1)<br>        l2= <span class="hljs-variable language_">self</span>.linkedlist_to_number(l2)<br>        <span class="hljs-built_in">sum</span> = l1+l2<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.number_to_linkedlist(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h3 id="指標法"><a href="#指標法" class="headerlink" title="指標法"></a>指標法</h3><p><strong>解題想法</strong>: 用兩個指標同步遍歷 <code>l1</code>、<code>l2</code>，每位數加總並處理進位，將結果依序接到一個 <code>dummy head</code> 後面，最後若還有進位就補一個節點，回傳 <code>dummy.next</code> 即為答案。<br><strong>時間複雜度</strong>: O(m+n)<br><strong>空間複雜度</strong>: O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1, l2</span>):<br>        dummy = ListNode(<span class="hljs-number">0</span>)<br>        current = dummy<br>        carry = <span class="hljs-number">0</span><br>        <br>        p,q = l1,l2<br>        <span class="hljs-keyword">while</span> p <span class="hljs-keyword">or</span> q <span class="hljs-keyword">or</span> carry:  <br>            x = p.val <span class="hljs-keyword">if</span> p <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            y = q.val <span class="hljs-keyword">if</span> q <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            numsum = x + y+ carry<br>            <br>            current.<span class="hljs-built_in">next</span> = ListNode(val=numsum%<span class="hljs-number">10</span>)<br>            current = current.<span class="hljs-built_in">next</span><br><br>            carry = numsum//<span class="hljs-number">10</span> <br>            <span class="hljs-keyword">if</span> p: p = p.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> q: q = q.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span>    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1 - Two Sum</title>
    <link href="/2025/09/15/LeetCode-1-Two-Sum/"/>
    <url>/2025/09/15/LeetCode-1-Two-Sum/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-1-Two-Sum"><a href="#LeetCode-1-Two-Sum" class="headerlink" title="LeetCode 1 - Two Sum"></a>LeetCode 1 - Two Sum</h1><p>👉 <a href="https://leetcode.com/problems/two-sum/description/">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><p>給你一組整數陣列<code>nums</code>以及一個整數<code>target</code>， 找出<code>nums</code>中相加為<code>target</code>的兩個相異數字，<br>每次只會有一組解答</p><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><blockquote><p><strong>Input</strong>: nums &#x3D; [2,7,11,15], target &#x3D; 9<br><strong>Output</strong>: [0,1]<br><strong>Explanation</strong>: Because nums[0] + nums[1] &#x3D;&#x3D; 9, we return [0, 1].</p></blockquote><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><blockquote><p><strong>Input</strong>: nums &#x3D; [3,2,4], target &#x3D; 6<br><strong>Output</strong>: [1,2]</p></blockquote><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><blockquote><p><strong>Input</strong>: nums &#x3D; [3,3], target &#x3D; 6<br><strong>Output</strong>: [0,1]</p></blockquote><hr><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>Only one valid answer exists.</strong></li></ul><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="暴力解"><a href="#暴力解" class="headerlink" title="暴力解"></a>暴力解</h3><p><strong>解題想法</strong>: 直接用雙迴圈找答案<br><strong>時間複雜度</strong>: O(n²)<br><strong>空間複雜度</strong>: O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,n):<br>                <span class="hljs-keyword">if</span> nums[i]+nums[j] == target:<br>                    <span class="hljs-keyword">return</span> [i,j]<br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><p><strong>解題想法</strong>: 在遍歷一次<code>nums</code>可以知道每個數與<code>target</code>的差值(<code>target-num1</code>)，因此可以將每次的數字存進<code>Hash table</code>中，當差值出現在<code>table</code>中即可直接輸出結果，<code>Hash table</code>需要儲存<code>nums</code>中的數字及其<code>index</code><br><strong>時間複雜度</strong>: O(n)<br><strong>空間複雜度</strong>: O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        hash_table= &#123;&#125;<br>        length = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>            <span class="hljs-keyword">if</span> target - nums[i] <span class="hljs-keyword">in</span> hash_table:<br>                <span class="hljs-keyword">return</span> [i,hash_table[target - nums[i]]]<br>            hash_table[nums[i]]=i<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA 00490 - Rotating Sentences</title>
    <link href="/2025/09/13/UVA-00490-Rotating-Sentences/"/>
    <url>/2025/09/13/UVA-00490-Rotating-Sentences/</url>
    
    <content type="html"><![CDATA[<h1 id="UVA-00272-TeX-Quotes"><a href="#UVA-00272-TeX-Quotes" class="headerlink" title="UVA 00272-TeX-Quotes"></a>UVA 00272-TeX-Quotes</h1><p>👉 <a href="https://zerojudge.tw/ShowProblem?problemid=c045">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><p>給你一段由多行文字組成的句子集合，請將這些文字 順時針旋轉 90° 後輸出</p><h2 id="輸入與輸出"><a href="#輸入與輸出" class="headerlink" title="輸入與輸出"></a>輸入與輸出</h2><h3 id="輸入"><a href="#輸入" class="headerlink" title="輸入"></a>輸入</h3><p>多行文字（每行字串長度 ≤ 100）<br>行數不固定，直到檔案結束<code>EOF</code></p><h3 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h3><p>將所有輸入的文字區塊順時針旋轉 90°，逐行輸出旋轉後的結果</p><hr><blockquote><p><strong>⚠️注意事項與陷阱</strong></p><ol><li><strong>行長不一</strong>: 有些輸入行可能比其他行短。旋轉時要把短行補齊（視為空格 ‘ ‘）</li><li><strong>EOF 輸入</strong>: 這題沒有給定測資數量，必須讀到 <code>EOF</code>。</li><li><strong>旋轉後行數</strong>: 旋轉後的「行數」等於輸入的最長行長度, 旋轉後的「每行長度」等於輸入的行數</li></ol></blockquote><hr><h2 id="解題想法"><a href="#解題想法" class="headerlink" title="解題想法"></a>解題想法</h2><p>使用泡沫排序的概念<br>每次發現相鄰逆序就交換，並把交換次數加一<br>最後總交換次數就是答案</p><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><table><thead><tr><th>Sample Input</th><th>Sample Output</th></tr></thead><tbody><tr><td>Rene Decartes once said,<br>“I think, therefore I am.”</td><td>“R<br>Ie<br> n<br>te<br>h <br>iD<br>ne<br>kc<br>,a<br> r<br>tt<br>he<br>es<br>r <br>eo<br>fn<br>oc<br>re<br>e <br> s<br>Ia<br> i<br>ad<br>m,<br>. <br>“<br></td></tr></tbody></table><hr><h2 id="解法-AC-code"><a href="#解法-AC-code" class="headerlink" title="解法-AC code"></a>解法-AC code</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    lines = [line.rstrip(<span class="hljs-string">&quot;\n&quot;</span>) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin]  <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> lines:<br>        <span class="hljs-keyword">return</span><br>    n = <span class="hljs-built_in">len</span>(lines)<br>    maxLen = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> lines)<br><br>   <br>    mat = []<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> lines:<br>        row = <span class="hljs-built_in">list</span>(s) + [<span class="hljs-string">&#x27; &#x27;</span>] * (maxLen - <span class="hljs-built_in">len</span>(s))<br>        mat.append(row)<br><br>   <br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(maxLen):<br>        out = []<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            out.append(mat[row][col])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(out))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        ArrayList&lt;String&gt; lines = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        String line;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            lines.add(line);<br>            maxLen = Math.max(maxLen, line.length());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> lines.size();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-type">char</span>[][] mat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n][maxLen];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) Arrays.fill(mat[i], <span class="hljs-string">&#x27; &#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> lines.get(i);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; s.length(); j++) &#123;<br>                mat[i][j] = s.charAt(j);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; maxLen; col++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;<br>                sb.append(mat[row][col]);<br>            &#125;<br>            sb.append(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>        &#125;<br>        System.out.print(sb.toString());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LINES 1050</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LEN   1050  </span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> buf[MAX_LEN];<br>    <span class="hljs-type">char</span> lines[MAX_LINES][MAX_LEN];<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> maxLen = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-built_in">stdin</span>)) &#123;<br>        <span class="hljs-type">size_t</span> L = <span class="hljs-built_in">strlen</span>(buf);<br>        <span class="hljs-keyword">if</span> (L &amp;&amp; buf[L - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\n&#x27;</span>) buf[--L] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">strncpy</span>(lines[n], buf, MAX_LEN - <span class="hljs-number">1</span>);<br>        lines[n][MAX_LEN - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-type">int</span>)L &gt; maxLen) maxLen = (<span class="hljs-type">int</span>)L;<br>        n++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> mat[MAX_LINES][MAX_LEN];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> L = (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(lines[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; maxLen; ++j) &#123;<br>            mat[i][j] = (j &lt; L) ? lines[i][j] : <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>; col &lt; maxLen; ++col) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> row = n - <span class="hljs-number">1</span>; row &gt;= <span class="hljs-number">0</span>; --row) &#123;<br>            <span class="hljs-built_in">putchar</span>(mat[row][col]);<br>        &#125;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    vector&lt;string&gt; lines;<br>    string s;<br>    <span class="hljs-type">int</span> maxLen = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        lines.<span class="hljs-built_in">push_back</span>(s);<br>        maxLen = <span class="hljs-built_in">max</span>&lt;<span class="hljs-type">int</span>&gt;(maxLen, s.<span class="hljs-built_in">size</span>());<br>    &#125;<br>    <span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)lines.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt; <span class="hljs-built_in">mat</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;(maxLen, <span class="hljs-string">&#x27; &#x27;</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-type">int</span>)lines[i].<span class="hljs-built_in">size</span>(); ++j) &#123;<br>            mat[i][j] = lines[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>; col &lt; maxLen; ++col) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> row = n - <span class="hljs-number">1</span>; row &gt;= <span class="hljs-number">0</span>; --row) &#123;<br>            cout &lt;&lt; mat[row][col];<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA 00299 - Train Swapping</title>
    <link href="/2025/09/12/UVA-00299-Train-Swapping/"/>
    <url>/2025/09/12/UVA-00299-Train-Swapping/</url>
    
    <content type="html"><![CDATA[<h1 id="UVA-00272-TeX-Quotes"><a href="#UVA-00272-TeX-Quotes" class="headerlink" title="UVA 00272-TeX-Quotes"></a>UVA 00272-TeX-Quotes</h1><p>👉 <a href="https://zerojudge.tw/ShowProblem?problemid=e561">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><p>給你目前車廂長度順序，把車廂順序從小到大排序</p><h2 id="輸入與輸出"><a href="#輸入與輸出" class="headerlink" title="輸入與輸出"></a>輸入與輸出</h2><h3 id="輸入"><a href="#輸入" class="headerlink" title="輸入"></a>輸入</h3><ul><li>第一行為測資組數 N。</li><li>之後對於每一組測資：<ul><li>第一行為整數 ，L表示車廂數量</li><li>第二行為 L 個整數，表示車廂當前的排列</li></ul></li></ul><h3 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h3><p>對每組測資輸出一行：<br><code>Optimal train swapping takes X swaps.</code><br>X 代表最少交換次數</p><hr><blockquote><p><strong>⚠️注意事項與陷阱</strong></p><ol><li><strong>輸出字串</strong>: 格式必須逐字一致</li><li><strong>交換方式</strong>: 每次只能對調相鄰兩節車廂</li></ol></blockquote><hr><h2 id="解題想法"><a href="#解題想法" class="headerlink" title="解題想法"></a>解題想法</h2><p>使用泡沫排序的概念<br>每次發現相鄰逆序就交換，並把交換次數加一<br>最後總交換次數就是答案</p><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><table><thead><tr><th>Sample Input</th><th>Sample Output</th></tr></thead><tbody><tr><td>3<br>3<br>1 3 2<br>4<br>4 3 2 1<br>2<br>2 1</td><td>Optimal train swapping takes 1 swaps.<br>Optimal train swapping takes 6 swaps.<br>Optimal train swapping takes 1 swaps.</td></tr></tbody></table><hr><h2 id="解法-AC-code"><a href="#解法-AC-code" class="headerlink" title="解法-AC code"></a>解法-AC code</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.read().strip().split()))<br>    it = <span class="hljs-built_in">iter</span>(data)<br>    <span class="hljs-keyword">try</span>:<br>        t = <span class="hljs-built_in">next</span>(it)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        <span class="hljs-keyword">return</span><br>    out_lines = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        L = <span class="hljs-built_in">next</span>(it)<br>        a = [<span class="hljs-built_in">next</span>(it) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L)]<br>        swaps = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># Bubble count</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, L - <span class="hljs-number">1</span> - i):<br>                <span class="hljs-keyword">if</span> a[j] &gt; a[j + <span class="hljs-number">1</span>]:<br>                    a[j], a[j + <span class="hljs-number">1</span>] = a[j + <span class="hljs-number">1</span>], a[j]<br>                    swaps += <span class="hljs-number">1</span><br>        out_lines.append(<span class="hljs-string">f&quot;Optimal train swapping takes <span class="hljs-subst">&#123;swaps&#125;</span> swaps.&quot;</span>)<br>    sys.stdout.write(<span class="hljs-string">&quot;\n&quot;</span>.join(out_lines))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    solve()<br><br></code></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FastScanner</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastScanner</span>(System.in);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">tObj</span> <span class="hljs-operator">=</span> fs.nextInt();<br>        <span class="hljs-keyword">if</span> (tObj == <span class="hljs-literal">null</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">T</span> <span class="hljs-operator">=</span> tObj;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; tc &lt; T; tc++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">L</span> <span class="hljs-operator">=</span> fs.nextInt();<br>            <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[L];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; L; i++) a[i] = fs.nextInt();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">swaps</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; L; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j + <span class="hljs-number">1</span> &lt; L - i; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> a[j]; a[j] = a[j + <span class="hljs-number">1</span>]; a[j + <span class="hljs-number">1</span>] = tmp;<br>                        swaps++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            sb.append(<span class="hljs-string">&quot;Optimal train swapping takes &quot;</span>).append(swaps).append(<span class="hljs-string">&quot; swaps.\n&quot;</span>);<br>        &#125;<br>        System.out.print(sb.toString());<br>    &#125;<br><br>    <span class="hljs-comment">// 快速讀取</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastScanner</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> InputStream in;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>];<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ptr</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, len = <span class="hljs-number">0</span>;<br>        FastScanner(InputStream is) &#123; in = is; &#125;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">if</span> (ptr &gt;= len) &#123;<br>                len = in.read(buffer);<br>                ptr = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> buffer[ptr++];<br>        &#125;<br>        Integer <span class="hljs-title function_">nextInt</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-type">int</span> c, sgn = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">do</span> &#123; c = read(); <span class="hljs-keyword">if</span> (c == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; &#125; <span class="hljs-keyword">while</span> (c &lt;= <span class="hljs-string">&#x27; &#x27;</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) &#123; sgn = -<span class="hljs-number">1</span>; c = read(); &#125;<br>            <span class="hljs-keyword">while</span> (c &gt; <span class="hljs-string">&#x27; &#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + (c - <span class="hljs-string">&#x27;0&#x27;</span>); c = read(); &#125;<br>            <span class="hljs-keyword">return</span> x * sgn;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T) != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-type">int</span> L;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;L) != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> a[<span class="hljs-number">1005</span>]; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> swaps = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j + <span class="hljs-number">1</span> &lt; L - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-type">int</span> tmp = a[j]; a[j] = a[j + <span class="hljs-number">1</span>]; a[j + <span class="hljs-number">1</span>] = tmp;<br>                    swaps++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Optimal train swapping takes %lld swaps.\n&quot;</span>, swaps);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-keyword">if</span> (!(cin &gt;&gt; T)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-type">int</span> L; <br>        cin &gt;&gt; L;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(L)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L; ++i) cin &gt;&gt; a[i];<br><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> swaps = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j + <span class="hljs-number">1</span> &lt; L - i; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-built_in">swap</span>(a[j], a[j + <span class="hljs-number">1</span>]);<br>                    ++swaps;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Optimal train swapping takes &quot;</span> &lt;&lt; swaps &lt;&lt; <span class="hljs-string">&quot; swaps.\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA 00272-TeX-Quotes</title>
    <link href="/2025/09/11/UVA-00272-TeX-Quotes/"/>
    <url>/2025/09/11/UVA-00272-TeX-Quotes/</url>
    
    <content type="html"><![CDATA[<h1 id="UVA-00272-TeX-Quotes"><a href="#UVA-00272-TeX-Quotes" class="headerlink" title="UVA 00272-TeX-Quotes"></a>UVA 00272-TeX-Quotes</h1><p>👉 <a href="https://zerojudge.tw/ShowProblem?problemid=c007">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><p>給你一段文章，<br>將文章中的雙引號<code>&quot; &quot;</code>用 &#96;&#96; 及 ‘’ 表示</p><ul><li>第一個遇到的 “ 換成 &#96;&#96;</li><li>第二個遇到的 “ 換成 ‘’</li><li>第三個再換成 &#96;&#96;，以此類推交替處理</li></ul><hr><h2 id="輸入與輸出"><a href="#輸入與輸出" class="headerlink" title="輸入與輸出"></a>輸入與輸出</h2><h3 id="輸入"><a href="#輸入" class="headerlink" title="輸入"></a>輸入</h3><p>一段文章直到檔案結束（EOF）。</p><h3 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h3><p>將輸入文字中的每個雙引號替換成對應的 &#96;&#96; 或 ‘’，並輸出完整結果</p><hr><blockquote><p><strong>⚠️注意事項與陷阱</strong></p><ol><li><strong>輸入方式</strong>: 本題輸入為「多行直到 EOF」，必須能持續讀檔，不可只讀一行。</li><li><strong>內容保留</strong>: 除了雙引號要轉換，其餘文字必須完整保留，不能有任何變動。</li></ol></blockquote><hr><h2 id="解題想法"><a href="#解題想法" class="headerlink" title="解題想法"></a>解題想法</h2><ol><li>設一個<strong>布林變數</strong> <code>isOpening = true</code></li><li>從頭讀入整段文字，逐字掃描：</li></ol><ul><li>如果遇到 “, 檢查 isOpening：<ul><li>若 <code>true</code> → 輸出 <code>``</code>，並將 <code>isOpening = false</code></li><li>若 <code>false</code> → 輸出 ‘’，<code>並將 isOpening = true</code></li></ul></li><li>其他字元 → 原樣輸出。</li></ul><ol start="3"><li>持續處理直到檔案結束。</li></ol><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><table><thead><tr><th>Sample Input</th><th>Sample Output</th></tr></thead><tbody><tr><td>“To be or not to be,” quoth the Bard, “that is the question”.<br>The programming contestant replied: “I must disagree.<br>To &#96;C’ or not to &#96;C’, that is The Question!”</td><td>&#96;&#96;To be or not to be,’’ quoth the Bard, &#96;&#96;that is the question’’.<br>The programming contestant replied: &#96;&#96;I must disagree.<br>To &#96;C’ or not to &#96;C’, that is The Question!’’</td></tr></tbody></table><hr><h2 id="解法-AC-code"><a href="#解法-AC-code" class="headerlink" title="解法-AC code"></a>解法-AC code</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>isOpening = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    output = []<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> line:<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>            <span class="hljs-keyword">if</span> isOpening:<br>                output.append(<span class="hljs-string">&quot;``&quot;</span>)<br>                isOpening = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                output.append(<span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>)<br>                isOpening = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            output.append(ch)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(output), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        String line;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isOpening</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : line.toCharArray()) &#123;<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (isOpening) &#123;<br>                        sb.append(<span class="hljs-string">&quot;``&quot;</span>);<br>                        isOpening = <span class="hljs-literal">false</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        sb.append(<span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>);<br>                        isOpening = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    sb.append(ch);<br>                &#125;<br>            &#125;<br>            System.out.println(sb.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> ch;<br>    <span class="hljs-type">int</span> isOpening = <span class="hljs-number">1</span>; <span class="hljs-comment">// true</span><br>    <span class="hljs-keyword">while</span> ((ch = getchar()) != EOF) &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (isOpening) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;``&quot;</span>);<br>                isOpening = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>);<br>                isOpening = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">putchar</span>(ch);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">bool</span> isOpening = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (cin.<span class="hljs-built_in">get</span>(ch)) &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (isOpening) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;``&quot;</span>;<br>                isOpening = <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>;<br>                isOpening = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; ch;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA 00118 - Mutant Flatworld Expolrers</title>
    <link href="/2025/09/09/UVA-00118-Mutant-Flatworld-Expolrers/"/>
    <url>/2025/09/09/UVA-00118-Mutant-Flatworld-Expolrers/</url>
    
    <content type="html"><![CDATA[<h1 id="UVA-00118-Mutant-Flatworld-Expolrers"><a href="#UVA-00118-Mutant-Flatworld-Expolrers" class="headerlink" title="UVA 00118 - Mutant Flatworld Expolrers"></a>UVA 00118 - Mutant Flatworld Expolrers</h1><p>👉 <a href="https://zerojudge.tw/ShowProblem?problemid=c082">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><p>有一個矩形地圖，放上幾台機器人<br>每台機器人有起始位置與方向，接著依序執行一串指令：</p><ul><li><strong>L：左轉</strong></li><li><strong>R：右轉</strong></li><li><strong>F：往前走</strong><br>如果往前會走出地圖，機器人就會掉下去並消失（輸出時要標記 LOST）<br>掉下去的地方會留下「<strong>標記</strong>」，之後的機器人若再遇到同樣危險，會自動忽略掉下去的指令</li></ul><hr><h2 id="輸入與輸出"><a href="#輸入與輸出" class="headerlink" title="輸入與輸出"></a>輸入與輸出</h2><h3 id="輸入"><a href="#輸入" class="headerlink" title="輸入"></a>輸入</h3><p>第一行：兩個正整數 X Y，代表地圖右上角座標（左下固定為 0 0）。<br>接著多組資料（到檔尾 EOF 為止），每組兩行：<br>第1行：x y D（D ∈ {N,S,E,W}）— 機器人起始位置與方向<br>第2行：指令字串（只含 L、R、F）<br>限制：座標最大值 ≤ 50；每組指令長度 ≤ 100。機器人起始位置皆在範圍內。</p><h3 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h3><p>每台機器人執行完後的位置與方向，若掉下去則加上 <strong>LOST</strong>。</p><hr><blockquote><p><strong>⚠️注意事項與陷阱</strong></p><ol><li><strong>掉落判定</strong>: 機器人一旦執行 F 超出範圍，就立刻掉落並輸出 LOST，掉落位置要輸出最後還在地圖內的座標與方向 </li><li><strong>標記判定</strong>: 機器人遇到標記必須忽略那次 F，繼續下一個指令</li><li><strong>輸出格式</strong>: 每台機器人輸出：x y D，若掉落，要在後面加上 LOST</li></ol></blockquote><hr><h2 id="解題想法"><a href="#解題想法" class="headerlink" title="解題想法"></a>解題想法</h2><p>我先建一個地圖，記錄機器人的位置和方向。<br>指令逐步模擬，走出邊界就留下「<strong>LOST</strong>」標記。<br>後面機器人遇到同樣情況時會檢查標記，有就忽略，不會再掉下去。<br>方向用陣列：dirs &#x3D; [‘N’,’E’,’S’,’W’]，左轉 -1、右轉 +1 。<br>位移表：N:(0,1) E:(1,0) S:(0,-1) W:(-1,0)。<br>標記用 set 存 (x,y,dir)；遇到同狀態的危險前進就跳過 F。<br>掉落立刻結束該機器人迭代，輸出最後在地圖內的位置 + LOST。</p><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><table><thead><tr><th>Sample Input</th><th>Sample Output</th></tr></thead><tbody><tr><td>5 3 <br> 1 1 E <br> RFRFRFRF <br> 3 2 N <br> FRRFLLFFRRFLL <br> 0 3 W <br> LLFFFLFLFL</td><td>1 1 E <br> 3 3 N LOST <br> 2 3 S</td></tr></tbody></table><hr><h2 id="解法-AC-code"><a href="#解法-AC-code" class="headerlink" title="解法-AC code"></a>解法-AC code</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>tokens = sys.stdin.read().split()<br>it = <span class="hljs-built_in">iter</span>(tokens)<br>X, Y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">next</span>(it)), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">next</span>(it))<br><br>dirs = [<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>]<br>didx = &#123;d:i <span class="hljs-keyword">for</span> i,d <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dirs)&#125;<br>dx = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]<br>dy = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br><br>scents = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># (x, y, dir_char)</span><br><br>out = []<br><span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(it,it):<br>    x = <span class="hljs-built_in">int</span>(x); y = <span class="hljs-built_in">int</span>(y)<br>    d = <span class="hljs-built_in">next</span>(it)<br>    instr = <span class="hljs-built_in">next</span>(it)<br>    i = didx[d]<br>    lost = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> instr:<br>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;L&#x27;</span>:<br>            i = (i - <span class="hljs-number">1</span>) % <span class="hljs-number">4</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;R&#x27;</span>:<br>            i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># &#x27;F&#x27;</span><br>            nx, ny = x + dx[i], y + dy[i]<br>            <span class="hljs-keyword">if</span> nx &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> nx &gt; X <span class="hljs-keyword">or</span> ny &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> ny &gt; Y:<br>                key = (x, y, dirs[i])<br>                <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> scents:<br>                    <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># ignore this F</span><br>                scents.add(key)<br>                lost = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                x, y = nx, ny<br><br>    out.append(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;x&#125;</span> <span class="hljs-subst">&#123;y&#125;</span> <span class="hljs-subst">&#123;dirs[i]&#125;</span>&quot;</span> + (<span class="hljs-string">&quot; LOST&quot;</span> <span class="hljs-keyword">if</span> lost <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>.join(out))<br></code></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">if</span> (!sc.hasNextInt()) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">X</span> <span class="hljs-operator">=</span> sc.nextInt(), Y = sc.nextInt();<br><br>        String[] dirs = &#123;<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;W&quot;</span>&#125;;<br>        Map&lt;String,Integer&gt; dmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++) dmap.put(dirs[k], k);<br>        <span class="hljs-type">int</span>[] dx = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>&#125;, dy = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><br>        Set&lt;String&gt; scents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> sc.nextInt(), y = sc.nextInt();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">instr</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dmap.get(d);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">lost</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;t&lt;instr.length();t++) &#123;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> instr.charAt(t);<br>                <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;L&#x27;</span>) i = (i+<span class="hljs-number">3</span>)%<span class="hljs-number">4</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;R&#x27;</span>) i = (i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">nx</span> <span class="hljs-operator">=</span> x + dx[i], ny = y + dy[i];<br>                    <span class="hljs-keyword">if</span> (nx&lt;<span class="hljs-number">0</span> || nx&gt;X || ny&lt;<span class="hljs-number">0</span> || ny&gt;Y) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> x + <span class="hljs-string">&quot; &quot;</span> + y + <span class="hljs-string">&quot; &quot;</span> + dirs[i];<br>                        <span class="hljs-keyword">if</span> (scents.contains(key)) <span class="hljs-keyword">continue</span>;<br>                        scents.add(key);<br>                        lost = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        x = nx; y = ny;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            sb.append(x).append(<span class="hljs-string">&#x27; &#x27;</span>).append(y).append(<span class="hljs-string">&#x27; &#x27;</span>).append(dirs[i]);<br>            <span class="hljs-keyword">if</span> (lost) sb.append(<span class="hljs-string">&quot; LOST&quot;</span>);<br>            sb.append(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>        &#125;<br>        System.out.print(sb.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> X, Y;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;X, &amp;Y) != <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> dirs[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>&#125;;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// scents[x][y][dirIndex] up to 50</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> scents[<span class="hljs-number">51</span>][<span class="hljs-number">51</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-type">int</span> x, y; <span class="hljs-type">char</span> D; <span class="hljs-type">char</span> instr[<span class="hljs-number">110</span>];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %c %s&quot;</span>, &amp;x, &amp;y, &amp;D, instr) == <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++) <span class="hljs-keyword">if</span> (dirs[i]==D) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-type">int</span> lost = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; instr[k]; k++) &#123;<br>            <span class="hljs-type">char</span> c = instr[k];<br>            <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;L&#x27;</span>) i = (i+<span class="hljs-number">3</span>)%<span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;R&#x27;</span>) i = (i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> nx = x + dx[i], ny = y + dy[i];<br>                <span class="hljs-keyword">if</span> (nx&lt;<span class="hljs-number">0</span> || nx&gt;X || ny&lt;<span class="hljs-number">0</span> || ny&gt;Y) &#123;<br>                    <span class="hljs-keyword">if</span> (x&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;=X &amp;&amp; y&gt;=<span class="hljs-number">0</span> &amp;&amp; y&lt;=Y &amp;&amp; scents[x][y][i]) &#123;<br>                        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// ignore this F</span><br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (x&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;=X &amp;&amp; y&gt;=<span class="hljs-number">0</span> &amp;&amp; y&lt;=Y) scents[x][y][i] = <span class="hljs-number">1</span>;<br>                    lost = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    x = nx; y = ny;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %c&quot;</span>, x, y, dirs[i]);<br>        <span class="hljs-keyword">if</span> (lost) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; LOST&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> X, Y;<br>    <span class="hljs-keyword">if</span> (!(cin &gt;&gt; X &gt;&gt; Y)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    vector&lt;<span class="hljs-type">char</span>&gt; dirs = &#123;<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>&#125;;<br>    map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; dmap&#123;&#123;<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-number">3</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;<br>    set&lt;tuple&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">char</span>&gt;&gt; scents;<br><br>    <span class="hljs-type">int</span> x,y; <span class="hljs-type">char</span> d; string instr;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; x &gt;&gt; y &gt;&gt; d &gt;&gt; instr) &#123;<br>        <span class="hljs-type">int</span> i = dmap[d];<br>        <span class="hljs-type">bool</span> lost = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c: instr) &#123;<br>            <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;L&#x27;</span>) i = (i<span class="hljs-number">+3</span>)%<span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;R&#x27;</span>) i = (i<span class="hljs-number">+1</span>)%<span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> nx = x + dx[i], ny = y + dy[i];<br>                <span class="hljs-keyword">if</span> (nx&lt;<span class="hljs-number">0</span> || nx&gt;X || ny&lt;<span class="hljs-number">0</span> || ny&gt;Y) &#123;<br>                    <span class="hljs-keyword">auto</span> key = <span class="hljs-built_in">make_tuple</span>(x,y,dirs[i]);<br>                    <span class="hljs-keyword">if</span> (scents.<span class="hljs-built_in">count</span>(key)) <span class="hljs-keyword">continue</span>;<br>                    scents.<span class="hljs-built_in">insert</span>(key);<br>                    lost = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123; x = nx; y = ny; &#125;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; dirs[i];<br>        <span class="hljs-keyword">if</span> (lost) cout &lt;&lt; <span class="hljs-string">&quot; LOST&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA 00100 - The 3n + 1 problem</title>
    <link href="/2025/09/09/UVA-00100-The-3n-1-problem/"/>
    <url>/2025/09/09/UVA-00100-The-3n-1-problem/</url>
    
    <content type="html"><![CDATA[<h1 id="UVA-00100-The-3n-1-Problem"><a href="#UVA-00100-The-3n-1-Problem" class="headerlink" title="UVA 00100 - The 3n + 1 Problem"></a>UVA 00100 - The 3n + 1 Problem</h1><p>👉 <a href="https://zerojudge.tw/ShowProblem?problemid=c039">題目連結</a></p><h2 id="📖題目說明"><a href="#📖題目說明" class="headerlink" title="📖題目說明"></a>📖題目說明</h2><p>這題是經典的 <strong>Collatz 猜想</strong> 題目<br>給定兩個整數 i 和 j，我們需要依照以下演算法規則來得到數列的變化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">input n<br><span class="hljs-built_in">print</span> n<br><span class="hljs-keyword">if</span> n = 1 <span class="hljs-keyword">then</span> STOP<br><span class="hljs-keyword">if</span> n is odd <span class="hljs-keyword">then</span> n ←− 3n + 1<br><span class="hljs-keyword">else</span> n ←− n/2<br>GOTO 2<br></code></pre></td></tr></table></figure><p>從某個數字開始不斷套用這個規則，直到數列回到 1 為止，整個過程中包含的項目數稱為 <strong>cycle length</strong><br>題目的要求是：在區間 [i, j] 內的所有整數中，找出其 cycle length 的最大值並輸出</p><hr><h2 id="輸入與輸出"><a href="#輸入與輸出" class="headerlink" title="輸入與輸出"></a>輸入與輸出</h2><h3 id="輸入"><a href="#輸入" class="headerlink" title="輸入"></a>輸入</h3><p>每行會有兩個整數 i j (0 &lt; i, j &lt; 1,000,000)，可能有很多行。</p><h3 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h3><p>對每一行，輸出原本的 i j，以及介於 i 和 j 之間所有數字所產生的 最大 <strong>cycle length</strong>。</p><hr><blockquote><p><strong>⚠️注意事項與陷阱</strong></p><ol><li><strong>輸出順序</strong>: 必須輸出原始輸入的 i j，即使 i &gt; j 也不能調換 </li><li><strong>cycle length 計算</strong>: 一定要包含起始數字與 1</li><li><strong>效能</strong>: 數字範圍可能高達 1,000,000，暴力解可能會超時</li></ol></blockquote><hr><h2 id="解題想法"><a href="#解題想法" class="headerlink" title="解題想法"></a>解題想法</h2><p>核心在於計算 <strong>cycle length</strong>，如果使用暴力法會太耗時，所以想將題目給予的演算法製作成遞迴式並使快取減少運算</p><hr><h2 id="範例輸入與輸出"><a href="#範例輸入與輸出" class="headerlink" title="範例輸入與輸出"></a>範例輸入與輸出</h2><table><thead><tr><th>Sample Input</th><th>Sample Output</th></tr></thead><tbody><tr><td>1 10 <br> 10 1 <br> 100 200 <br> 201 210 <br> 900 1000</td><td>1 10 20 <br> 10 1 20 <br> 100 200 125 <br> 201 210 89 <br> 900 1000 174</td></tr></tbody></table><hr><h2 id="解法-AC-code"><a href="#解法-AC-code" class="headerlink" title="解法-AC code"></a>解法-AC code</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">1_000_000</span>)<br><br>cache = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cycle_len</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> cache:<br>        <span class="hljs-keyword">return</span> cache[n]<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        res = <span class="hljs-number">1</span> + cycle_len(n // <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">else</span>:<br>        res = <span class="hljs-number">2</span> + cycle_len((<span class="hljs-number">3</span> * n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>)<br>    cache[n] = res<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line.strip():<br>        <span class="hljs-keyword">continue</span><br>    i, j = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, line.split())<br>    lo, hi = (i, j) <span class="hljs-keyword">if</span> i &lt;= j <span class="hljs-keyword">else</span> (j, i)<br>    mx = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lo, hi + <span class="hljs-number">1</span>):<br>        mx = <span class="hljs-built_in">max</span>(mx, cycle_len(k))<br>    <span class="hljs-built_in">print</span>(i, j, mx)<br></code></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> Map&lt;Long, Integer&gt; memo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> &#123;<br>        memo.put(<span class="hljs-number">1L</span>, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">got</span> <span class="hljs-operator">=</span> memo.get(n);<br>        <span class="hljs-keyword">if</span> (got != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> got;<br>        <span class="hljs-type">int</span> res;<br>        <span class="hljs-keyword">if</span> ((n &amp; <span class="hljs-number">1L</span>) == <span class="hljs-number">0</span>) &#123;<br>            res = <span class="hljs-number">1</span> + f(n / <span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res = <span class="hljs-number">2</span> + f((<span class="hljs-number">3</span> * n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>); <br>        &#125;<br>        memo.put(n, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        String s;<br>        <span class="hljs-keyword">while</span> ((s = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            s = s.trim();<br>            <span class="hljs-keyword">if</span> (s.isEmpty()) <span class="hljs-keyword">continue</span>;<br>            String[] p = s.split(<span class="hljs-string">&quot;\\s+&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.parseInt(p[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> Integer.parseInt(p[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> Math.min(i, j), hi = Math.max(i, j);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> lo; k &lt;= hi; k++) &#123;<br>                ans = Math.max(ans, f(k));<br>            &#125;<br>            System.out.println(i + <span class="hljs-string">&quot; &quot;</span> + j + <span class="hljs-string">&quot; &quot;</span> + ans);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 1000000</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> cache[MAXN + <span class="hljs-number">1</span>]; <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cycle_len</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= MAXN &amp;&amp; cache[n] != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> cache[n];<br><br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span> ((n &amp; <span class="hljs-number">1ULL</span>) == <span class="hljs-number">0ULL</span>) &#123;<br>        res = <span class="hljs-number">1</span> + cycle_len(n &gt;&gt; <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res = <span class="hljs-number">2</span> + cycle_len((<span class="hljs-number">3ULL</span> * n + <span class="hljs-number">1ULL</span>) &gt;&gt; <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (n &lt;= MAXN) cache[n] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> i, j;<br>    cache[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;i, &amp;j) == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> lo = i &lt; j ? i : j;<br>        <span class="hljs-type">int</span> hi = i &gt; j ? i : j;<br>        <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = lo; k &lt;= hi; ++k) &#123;<br>            <span class="hljs-type">int</span> len = cycle_len((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)k);<br>            <span class="hljs-keyword">if</span> (len &gt; mx) mx = len;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, i, j, mx);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>unordered_map&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>, <span class="hljs-type">int</span>&gt; memo&#123;&#123;<span class="hljs-number">1ULL</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = memo.<span class="hljs-built_in">find</span>(n);<br>    <span class="hljs-keyword">if</span> (it != memo.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">return</span> it-&gt;second;<br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span> ((n &amp; <span class="hljs-number">1ULL</span>) == <span class="hljs-number">0ULL</span>) res = <span class="hljs-number">1</span> + <span class="hljs-built_in">f</span>(n &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span>                     res = <span class="hljs-number">2</span> + <span class="hljs-built_in">f</span>((<span class="hljs-number">3ULL</span> * n + <span class="hljs-number">1ULL</span>) &gt;&gt; <span class="hljs-number">1</span>); <br>    memo[n] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> i, j;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; i &gt;&gt; j) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> lo = <span class="hljs-built_in">min</span>(i, j), hi = <span class="hljs-built_in">max</span>(i, j);<br>        <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> k = lo; k &lt;= hi; ++k) &#123;<br>            mx = <span class="hljs-built_in">max</span>(mx, <span class="hljs-built_in">f</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)k));<br>        &#125;<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; mx &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>數位訂單系統</title>
    <link href="/2025/09/08/Digital-ordering-app/"/>
    <url>/2025/09/08/Digital-ordering-app/</url>
    
    <content type="html"><![CDATA[<h1 id="數位訂單系統"><a href="#數位訂單系統" class="headerlink" title="數位訂單系統"></a>數位訂單系統</h1><img src="/2025/09/08/Digital-ordering-app/2.png" class="" title="[訂單大螢幕]"><h2 id="📌-專案簡介"><a href="#📌-專案簡介" class="headerlink" title="📌 專案簡介"></a>📌 專案簡介</h2><p><strong>數位訂單系統</strong> 是一個簡單的 <strong>訂單管理應用程式</strong>，用於建立、查詢、更新和刪除訂單資料，取代傳統的紙本作業。</p><ul><li><strong>定位</strong>：此系統是「訂單」的雙端解決方案，包含<ul><li>行動端：讓使用者快速新增訂單。</li><li>網頁看板：即時顯示「未出貨」訂單，提供管理、修改與歷史查詢。</li></ul></li><li><strong>核心價值</strong>：<ul><li>即時：Firebase 實現前端即時同步。</li><li>輕量：Serverless 架構，無需自建後端伺服器。</li><li>擴充：可依品項設定、訂單狀態流轉擴充功能。</li></ul></li></ul><p>👉 <a href="https://github.com/Zongda617/orders-app">GitHub 原始碼</a></p><hr><h2 id="✨-功能特色"><a href="#✨-功能特色" class="headerlink" title="✨ 功能特色"></a>✨ 功能特色</h2><ul><li><strong>新增訂單</strong>：輸入訂單編號、客戶名稱、品項、數量等資訊  </li><li><strong>查詢訂單</strong>：快速搜尋既有訂單  </li><li><strong>更新訂單</strong>：修改現有訂單的內容  </li><li><strong>刪除訂單</strong>：移除不需要的訂單</li><li><strong>跨裝置使用</strong>：手機、平板、電腦皆可操作，方便長輩與各行各業使用</li><li><strong>即時同步</strong>：輸入的訂單會即時顯示與更新，不需要再手寫或重新整理</li><li><strong>清晰 UI</strong>：直觀的操作介面，僅需輸入基本資訊即可完成下單</li></ul><hr><h2 id="⚙️-技術架構"><a href="#⚙️-技術架構" class="headerlink" title="⚙️ 技術架構"></a>⚙️ 技術架構</h2><ul><li><strong>前端（行動端）</strong>：Expo + React Native</li><li><strong>前端（Web 看板）</strong>：React  + react-scripts </li><li><strong>雲端後端</strong>：Firebase  </li><li><strong>語言</strong>：TypeScript &#x2F; JavaScript</li></ul><hr><h2 id="📂-專案結構"><a href="#📂-專案結構" class="headerlink" title="📂 專案結構"></a>📂 專案結構</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Digital ordering app/<br>├─ mobile-app/         # React Native App<br>├─ web-display/        # 大螢幕展示網頁<br>├─ firebase/           # Firebase 設定與說明<br>└─ README.md<br></code></pre></td></tr></table></figure><hr><h2 id="🚀-使用方式"><a href="#🚀-使用方式" class="headerlink" title="🚀 使用方式"></a>🚀 使用方式</h2><p>需要先到網頁新增品項 APP端才會有品項可以選擇</p><h3 id="網頁端"><a href="#網頁端" class="headerlink" title="網頁端"></a>網頁端</h3><p>網站 👉 <a href="https://pork-orders-app.web.app/">訂單網站</a></p><ol><li>進入設置</li><li>點擊品項設置</li><li>輸入品項名稱及單位 點擊新增</li></ol><img src="/2025/09/08/Digital-ordering-app/1.png" class="" title="[品項設定]"><ol start="4"><li>到行動端輸入訂單</li><li>網頁上即可看見訂單資訊</li></ol><img src="/2025/09/08/Digital-ordering-app/2.png" class="" title="[訂單大螢幕]"><h3 id="行動端"><a href="#行動端" class="headerlink" title="行動端"></a>行動端</h3><ol><li>輸入「客戶名稱」  </li><li>勾選所需品項（在網頁中新增的品項）  </li><li>選擇「交貨日期」  </li><li>填寫「備註」(可選填)  </li><li>按下 <strong>送出訂單</strong> 即完成！</li></ol><p style="text-align:center">  <img src="/2025/09/08/Digital-ordering-app/5.jpg"  alt="行動裝置" style="width:250px; height:auto;"></p>---<h2 id="🙌-適用對象"><a href="#🙌-適用對象" class="headerlink" title="🙌 適用對象"></a>🙌 適用對象</h2><ul><li>中小型商家（肉販、農產品、餐飲業）  </li><li>長輩族群（簡單輸入即可下單）  </li><li>任何需要「快速記錄訂單」的行業</li></ul><p>👉 <a href="https://github.com/Zongda617/orders-app">GitHub Repo 連結</a></p>]]></content>
    
    
    <categories>
      
      <category>Side Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Firebase</tag>
      
      <tag>TypeScript</tag>
      
      <tag>React</tag>
      
      <tag>React Native</tag>
      
      <tag>APP development</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爐石卡牌資料抓取工具</title>
    <link href="/2025/09/05/Hearthstone-Card-Downloader/"/>
    <url>/2025/09/05/Hearthstone-Card-Downloader/</url>
    
    <content type="html"><![CDATA[<h1 id="爐石戰記英雄戰場卡片下載器：完整教學與介紹"><a href="#爐石戰記英雄戰場卡片下載器：完整教學與介紹" class="headerlink" title="爐石戰記英雄戰場卡片下載器：完整教學與介紹"></a>爐石戰記英雄戰場卡片下載器：完整教學與介紹</h1><img src="/2025/09/05/Hearthstone-Card-Downloader/1.png" class="" title="[封面圖]"><h2 id="📌-專案簡介"><a href="#📌-專案簡介" class="headerlink" title="📌 專案簡介"></a>📌 專案簡介</h2><p>《爐石戰記：英雄戰場》每次改版或換季，卡片池都會更新。<br>不過官方網站的卡片資源常常不完整，缺少：    </p><ul><li>金卡圖片  </li><li>特殊配件卡</li></ul><p>為了解決這個問題，我開發了 <strong>英雄戰場卡片下載器</strong>，利用 <strong>暴雪 API</strong> 批次下載卡片，並提供查詢功能，讓玩家輕鬆取得完整的卡面。  </p><p>👉 <a href="https://hearthstone-card-download.onrender.com/">立即體驗 Demo 網站</a><br>👉 <a href="https://github.com/Zongda617/hearthstone_Card_download">GitHub 原始碼</a></p><hr><h2 id="✨-功能特色"><a href="#✨-功能特色" class="headerlink" title="✨ 功能特色"></a>✨ 功能特色</h2><ul><li>🖼 <strong>一次下載全部卡片</strong>：免逐一點擊，一鍵批次下載  </li><li>🎴 <strong>支援英雄戰場專屬卡</strong>：官方缺漏的卡牌也能下載  </li><li>🌟 <strong>完整卡面資源</strong>：普通卡、金卡、配件卡全收錄  </li><li>🔍 <strong>卡片查詢功能</strong>：輸入卡名即可搜尋，支援模糊查詢  </li><li>🔄 <strong>支援最新版本更新</strong>：改版後可立即同步最新資料</li></ul><hr><h2 id="⚙️技術架構與原理"><a href="#⚙️技術架構與原理" class="headerlink" title="⚙️技術架構與原理"></a>⚙️技術架構與原理</h2><ul><li><strong>資料來源</strong>：Blizzard 官方提供的 Hearthstone API</li><li><strong>後端框架</strong>：Flask</li><li><strong>前端顯示</strong>：簡易 HTML&#x2F;CSS + JavaScript</li><li><strong>功能邏輯</strong>：<ol><li>使用 API token 連接暴雪伺服器</li><li>透過 API 查詢英雄戰場卡池</li><li>自動批次下載卡面圖片</li><li>提供使用者輸入卡名查詢功能</li></ol></li></ul><hr><h2 id="🔍-操作示範"><a href="#🔍-操作示範" class="headerlink" title="🔍 操作示範"></a>🔍 操作示範</h2><p>打開 <a href="https://hearthstone-card-download.onrender.com/">Demo 網站</a></p><h3 id="✅-查詢卡片"><a href="#✅-查詢卡片" class="headerlink" title="✅ 查詢卡片"></a>✅ 查詢卡片</h3><p>輸入「手」即可顯示相關卡牌：<br>選取<strong>搜尋</strong>功能後輸入「手」</p><img src="/2025/09/05/Hearthstone-Card-Downloader/3.png" class="" title="[搜尋手]"><ul><li>多毛風笛手</li><li>月之培根爵士樂手</li><li>手風琴機器人</li></ul><img src="/2025/09/05/Hearthstone-Card-Downloader/4.png" class="" title="[搜尋結果]"><p>點進想下載的卡牌會看見卡片、金卡、相關卡</p><img src="/2025/09/05/Hearthstone-Card-Downloader/5.png" class="" title="[卡牌]"><p>找到想下載的牌直接右鍵下載</p><h3 id="✅批次下載"><a href="#✅批次下載" class="headerlink" title="✅批次下載"></a>✅批次下載</h3><p>從選項中找到你想下載哪種的全部卡牌，除了<strong>搜尋</strong>外皆為下載所有卡片</p><img src="/2025/09/05/Hearthstone-Card-Downloader/2.png" class="" title="[選擇類別]"><p>點擊開始下載後等待下載直到出現下載完成</p><img src="/2025/09/05/Hearthstone-Card-Downloader/6.png" class="" title="[下載完成]"><p>點擊下載圖片ZIP下載到本地</p><hr><h2 id="📂專案結構"><a href="#📂專案結構" class="headerlink" title="📂專案結構"></a>📂專案結構</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hearthstone_Card_download/<br>│── app.py              # Flask 主程式<br>│── static/             # 前端靜態檔案 (CSS/JS)<br>│── templates/          # HTML 模板<br>│── requirements.txt    # 需要的 Python 套件<br>└── utils/              # API 與下載工具函式<br></code></pre></td></tr></table></figure><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這個工具能幫助《爐石戰記：英雄戰場》的玩家快速下載完整卡片資源，特別是官方網站缺漏的部分，對於想做 卡池分析、戰略研究、內容創作者 都非常實用。</p><p>👉 歡迎試用: <a href="https://hearthstone-card-download.onrender.com/">爐石卡片下載器</a><br>👉 原始碼在這裡: <a href="https://github.com/Zongda617/hearthstone_Card_download">GitHub Repo</a></p>]]></content>
    
    
    <categories>
      
      <category>Side Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>遊戲工具</tag>
      
      <tag>Hearthstone Battlegrounds</tag>
      
      <tag>API</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
      <tag>Web development</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
